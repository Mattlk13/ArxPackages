#!/bin/bash

# Default config - sourced after scripts/config and before everything else
# After this the following config files will be sourced (if they exist)
# 1. $root/config
# 2. $root/config.$pkgtype           (if a pkgtype has been selected)
# 3. $root/$package/config
# 4. $root/$package/config.$pkgtype  (if a pkgtype has been selected)

# See scripts/config for documentation on possible values

EDITOR='kwrite'

################################################################################
# Build configuration

# C / C++ compiler flags
_compiler_flags=(
	-flto
	-fdata-sections
	-ffunction-sections
)
c_flags+=( "${_compiler_flags[@]}" )
cxx_flags+=( "${_compiler_flags[@]}" )
_compiler_flags_msvc=(
	/GL
)
c_flags_msvc+=( "${_compiler_flags_msvc[@]}" )
cxx_flags_msvc+=( "${_compiler_flags_msvc[@]}" )

# Linker flags
_linker_flags=(
	
	# Enable link-time optimizations
	"${c_flags[@]}"
	-fuse-linker-plugin
	-Wl,--gc-sections
	
)
shared_linker_flags+=( "${_linker_flags[@]}" )
exe_linker_flags+=(
	
	"${_linker_flags[@]}" 
	
	# Since we use LTO, get rid of as much unneeded cruft as possible
	-fwhole-program
	-fvisibility=hidden
	-fvisibility-inlines-hidden
	
)
_linker_flags_msvc=(
	
	# Enable link-time optimizations
	/LTCG
	/OPT:REF
	/OPT:ICF
	
)
shared_linker_flags_msvc+=( "${_linker_flags_msvc[@]}" )
exe_linker_flags_msvc+=( "${_linker_flags_msvc[@]}" )

# Taret names for used architectures (see $architectures)
# Syntax: [ARCHITECTURE]=TARGET
# We expect $target-gcc, $target-g++, $target-objdump, and $root_base/$target
targets+=(
	[linux-i686]='i686-bindist-linux-gnu'
	[linux-amd64]='x86_64-bindist-linux-gnu'
	[linux-armv6j-hardfloat]='armv6j-hardfloat-linux-gnueabi'
	[windows-i686]='i686-w64-mingw32'
	[freebsd-i686]='i686-gentoo-freebsd9.1'
	[freebsd-amd64]='x86_64-gentoo-freebsd9.1'
)

# Target-specific compiler flags
c_flags_linux_armv6j_hardfloat=( -mfpu=vfp -mfloat-abi=hard -Os )
cxx_flags_linux_armv6j_hardfloat=( -mfpu=vfp -mfloat-abi=hard -Os -Wno-uninitialized )

################################################################################
# Wrapper script configuration

# case-patterns to match for each architecture
# Syntax: [ARCHITECTURE]=PATTERN
architecture_aliases+=(
	[i686]='i[3-6]86|x86'
	[amd64]='amd64|x86_64'
	[armv6j-hardfloat]='arm*'
)

################################################################################
# Sanity checks

# List of versioned libraries (such as glibc) and their maximum allowed versions
# Syntax:
#  [LIBRARY]=MAXIMUM_VERSION
#  [LIBRARY-ARCHITECTURE]=MAXIMUM_VERSION
maximum_library_versions+=(
	[glibc]='2.6'
	[glibc-armv6j-hardfloat]='2.14'
)

################################################################################
# Documentation output

# Packager name and address to add to package logs entries
packager="Daniel Scharrer <daniel@constexpr.org>"

# Map of source files to licenses
# Syntax: [SOURCE]=LICENSE
# SOURCE can be a shell glob pattern
# SOURCE paths are relative to the cross-compile root ($root_base/$target)
# If LICENSE is the empty string, no license file is included.
# Otherwise, all files in $licensedir starting with "$LICENSE." are included.
licenses+=(
	
	['/usr/include/boost/*']='Boost'
	['/usr/lib/libboost_*']='Boost'
	['*/Code/Boost-*']='Boost'
	['*/Code/Boost/*']='Boost'
	
	['/usr/include/glm/*']='GLM'
	['*/Code/GLM-*']='GLM'
	['*/Code/GLM/*']='GLM'
	
	['/usr/include/zconf.h']='zlib'
	['/usr/include/zlib*']='zlib'
	['/usr/lib/libz.*']='zlib'
	['*/Code/zlib-*']='zlib'
	['*/Code/zlib/*']='zlib'
	
	['/usr/lib/libbz2.*']='libbz2'
	['*/Code/bzip2-*']='libbz2'
	['*/Code/bzip2/*']='libbz2'
	
	['/usr/include/lzma.h']='liblzma'
	['/usr/include/lzma/*']='liblzma'
	['/usr/lib/liblzma.*']='liblzma'
	['*/Code/liblzma-*']='liblzma'
	['*/Code/liblzma/*']='liblzma'
	
	['/usr/include/iconv.h']='' # may come from glibc
	['/usr/lib/libiconv.*']='libiconv'
	['*/Code/libiconv-*']='libiconv'
	['*/Code/libiconv/*']='libiconv'
	
	['/usr/include/AL/*']='OpenAL_Soft'
	['/usr/lib/libopenal.*']='OpenAL_Soft'
	['*/Code/OpenAL-Soft-*']='OpenAL_Soft'
	['*/Code/OpenAL-Soft/*']='OpenAL_Soft'
	
	['/usr/include/GL/*']='' #interface only, no implementation
	['/usr/lib/libGLEW*']='GLEW'
	['*/Code/GLEW-*']='GLEW'
	['*/Code/GLEW/*']='GLEW'
	
	['/usr/include/SDL/*']='SDL'
	['/usr/lib/libSDL.so*']='SDL'
	['/usr/lib/libSDL-1.2.so*']='SDL'
	['*/Code/SDL-*']='SDL'
	['*/Code/SDL/*']='SDL'
	
	['/usr/include/SDL2/*']='SDL2'
	['/usr/lib/libSDL2.so*']='SDL2'
	['/usr/lib/libSDL2-*.so*']='SDL2'
	['*/Code/SDL2-*']='SDL2'
	['*/Code/SDL2/*']='SDL2'
	
	['/usr/include/freetype*']='FreeType'
	['/usr/lib/libfreetype.*']='FreeType'
	['/usr/include/ft2build.h']='FreeType'
	['*/Code/FreeType-*']='FreeType'
	['*/Code/FreeType/*']='FreeType'
	
	['/usr/bin/bsdtar']='libarchive'
	
)

provided_versioned_libraries+=(
	'gcc-*'
)

################################################################################
# Deployment information

# OpenSUSE Build Service project to push RPM and DEB packages to
obs_project='home:dscharrer'

# Launchpad project to push RPM and DEB packages to
launchpad_ppa='ppa:arx/release'

# GPG key to use for Launchpad uploads
launchpad_key='28555A66D7E1DEC9'

# Ubuntu versions for which to push build jobs to Launchpad
ubuntu_versions+=(
	'precise' # 12.04 LTS  EOL: Apr 2017
	'trusty'  # 14.04 LTS  EOL: Apr 2019
	'utopic'  # 14.10      EOL: Jul 2015
	'vivid'   # 15.04      EOL: Jan 2016
)
