libstdc++ defines cin, cout, cerr and clog as char arrays internally so their initialization can be controlled.
This results in warnings when statically linking libstdc++ while using -flto and is not needed in that case anyway.
This patch changes them to normal global variables.
Due the way ios_base::sync_with_stdio() was implemented that function now becomes a noop, but meh.

Only in gcc-4.7.2.old/libstdc++-v3/src/c++98: globals_io.cc
diff -ur gcc-4.7.2.old/libstdc++-v3/src/c++98/ios_init.cc gcc-4.7.2/libstdc++-v3/src/c++98/ios_init.cc
--- gcc-4.7.2.old/libstdc++-v3/src/c++98/ios_init.cc	2012-01-24 00:12:01.000000000 +0100
+++ gcc-4.7.2/libstdc++-v3/src/c++98/ios_init.cc	2013-03-02 18:49:26.981053302 +0100
@@ -40,22 +40,14 @@
   using namespace __gnu_cxx;
 
   // Extern declarations for global objects in src/c++98/globals.cc.
-  extern stdio_sync_filebuf<char> buf_cout_sync;
-  extern stdio_sync_filebuf<char> buf_cin_sync;
-  extern stdio_sync_filebuf<char> buf_cerr_sync;
-
-  extern stdio_filebuf<char> buf_cout;
-  extern stdio_filebuf<char> buf_cin;
-  extern stdio_filebuf<char> buf_cerr;
+  stdio_sync_filebuf<char> buf_cout_sync(stdout);
+  stdio_sync_filebuf<char> buf_cin_sync(stdin);
+  stdio_sync_filebuf<char> buf_cerr_sync(stderr);
 
 #ifdef _GLIBCXX_USE_WCHAR_T
-  extern stdio_sync_filebuf<wchar_t> buf_wcout_sync;
-  extern stdio_sync_filebuf<wchar_t> buf_wcin_sync;
-  extern stdio_sync_filebuf<wchar_t> buf_wcerr_sync;
-
-  extern stdio_filebuf<wchar_t> buf_wcout;
-  extern stdio_filebuf<wchar_t> buf_wcin;
-  extern stdio_filebuf<wchar_t> buf_wcerr;
+  stdio_sync_filebuf<wchar_t> buf_wcout_sync(stdout);
+  stdio_sync_filebuf<wchar_t> buf_wcin_sync(stdin);
+  stdio_sync_filebuf<wchar_t> buf_wcerr_sync(stderr);
 #endif
 } // namespace __gnu_internal
 
@@ -65,16 +57,16 @@
 
   using namespace __gnu_internal;
   
-  extern istream cin;
-  extern ostream cout;
-  extern ostream cerr;
-  extern ostream clog;
+  istream cin(&buf_cin_sync);
+  ostream cout(&buf_cout_sync);
+  ostream cerr(&buf_cerr_sync);
+  ostream clog(&buf_cerr_sync);
 
 #ifdef _GLIBCXX_USE_WCHAR_T
-  extern wistream wcin;
-  extern wostream wcout;
-  extern wostream wcerr;
-  extern wostream wclog;
+  wistream wcin(&buf_wcin_sync);
+  wostream wcout(&buf_wcout_sync);
+  wostream wcerr(&buf_wcerr_sync);
+  wostream wclog(&buf_wcerr_sync);
 #endif
 
   ios_base::Init::Init()
@@ -84,16 +76,8 @@
 	// Standard streams default to synced with "C" operations.
 	_S_synced_with_stdio = true;
 
-	new (&buf_cout_sync) stdio_sync_filebuf<char>(stdout);
-	new (&buf_cin_sync) stdio_sync_filebuf<char>(stdin);
-	new (&buf_cerr_sync) stdio_sync_filebuf<char>(stderr);
-
 	// The standard streams are constructed once only and never
 	// destroyed.
-	new (&cout) ostream(&buf_cout_sync);
-	new (&cin) istream(&buf_cin_sync);
-	new (&cerr) ostream(&buf_cerr_sync);
-	new (&clog) ostream(&buf_cerr_sync);
 	cin.tie(&cout);
 	cerr.setf(ios_base::unitbuf);
 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
@@ -101,14 +85,6 @@
 	cerr.tie(&cout);
 
 #ifdef _GLIBCXX_USE_WCHAR_T
-	new (&buf_wcout_sync) stdio_sync_filebuf<wchar_t>(stdout);
-	new (&buf_wcin_sync) stdio_sync_filebuf<wchar_t>(stdin);
-	new (&buf_wcerr_sync) stdio_sync_filebuf<wchar_t>(stderr);
-
-	new (&wcout) wostream(&buf_wcout_sync);
-	new (&wcin) wistream(&buf_wcin_sync);
-	new (&wcerr) wostream(&buf_wcerr_sync);
-	new (&wclog) wostream(&buf_wcerr_sync);
 	wcin.tie(&wcout);
 	wcerr.setf(ios_base::unitbuf);
 	wcerr.tie(&wcout);	
@@ -155,49 +131,6 @@
     // 49.  Underspecification of ios_base::sync_with_stdio
     bool __ret = ios_base::Init::_S_synced_with_stdio;
 
-    // Turn off sync with C FILE* for cin, cout, cerr, clog iff
-    // currently synchronized.
-    if (!__sync && __ret)
-      {
-	// Make sure the standard streams are constructed.
-	ios_base::Init __init;
-
-	ios_base::Init::_S_synced_with_stdio = __sync;
-
-	// Explicitly call dtors to free any memory that is
-	// dynamically allocated by filebuf ctor or member functions,
-	// but don't deallocate all memory by calling operator delete.
-	buf_cout_sync.~stdio_sync_filebuf<char>();
-	buf_cin_sync.~stdio_sync_filebuf<char>();
-	buf_cerr_sync.~stdio_sync_filebuf<char>();
-
-#ifdef _GLIBCXX_USE_WCHAR_T
-	buf_wcout_sync.~stdio_sync_filebuf<wchar_t>();
-	buf_wcin_sync.~stdio_sync_filebuf<wchar_t>();
-	buf_wcerr_sync.~stdio_sync_filebuf<wchar_t>();
-#endif
-
-	// Create stream buffers for the standard streams and use
-	// those buffers without destroying and recreating the
-	// streams.
-	new (&buf_cout) stdio_filebuf<char>(stdout, ios_base::out);
-	new (&buf_cin) stdio_filebuf<char>(stdin, ios_base::in);
-	new (&buf_cerr) stdio_filebuf<char>(stderr, ios_base::out);
-	cout.rdbuf(&buf_cout);
-	cin.rdbuf(&buf_cin);
-	cerr.rdbuf(&buf_cerr);
-	clog.rdbuf(&buf_cerr);
-    
-#ifdef _GLIBCXX_USE_WCHAR_T
-	new (&buf_wcout) stdio_filebuf<wchar_t>(stdout, ios_base::out);
-	new (&buf_wcin) stdio_filebuf<wchar_t>(stdin, ios_base::in);
-	new (&buf_wcerr) stdio_filebuf<wchar_t>(stderr, ios_base::out);
-	wcout.rdbuf(&buf_wcout);
-	wcin.rdbuf(&buf_wcin);
-	wcerr.rdbuf(&buf_wcerr);
-	wclog.rdbuf(&buf_wcerr);
-#endif
-      }
     return __ret; 
   }
 
diff -ur gcc-4.7.2.old/libstdc++-v3/src/c++98/Makefile.am gcc-4.7.2/libstdc++-v3/src/c++98/Makefile.am
--- gcc-4.7.2.old/libstdc++-v3/src/c++98/Makefile.am	2012-04-17 02:19:12.000000000 +0200
+++ gcc-4.7.2/libstdc++-v3/src/c++98/Makefile.am	2013-03-02 18:05:45.584910676 +0100
@@ -116,7 +116,6 @@
 	codecvt.cc \
 	complex_io.cc \
 	ctype.cc \
-	globals_io.cc \
 	hash_tr1.cc \
 	hashtable_tr1.cc \
 	ios.cc \
diff -ur gcc-4.7.2.old/libstdc++-v3/src/c++98/Makefile.in gcc-4.7.2/libstdc++-v3/src/c++98/Makefile.in
--- gcc-4.7.2.old/libstdc++-v3/src/c++98/Makefile.in	2013-03-02 17:13:15.000000000 +0100
+++ gcc-4.7.2/libstdc++-v3/src/c++98/Makefile.in	2013-03-02 18:05:19.826898064 +0100
@@ -80,7 +80,7 @@
 am__objects_4 = basic_file.lo c++locale.lo $(am__objects_2) \
 	$(am__objects_3)
 am__objects_5 = bitmap_allocator.lo pool_allocator.lo mt_allocator.lo \
-	codecvt.lo complex_io.lo ctype.lo globals_io.lo hash_tr1.lo \
+	codecvt.lo complex_io.lo ctype.lo hash_tr1.lo \
 	hashtable_tr1.lo ios.lo ios_failure.lo ios_init.lo \
 	ios_locale.lo list.lo locale.lo locale_init.lo \
 	locale_facets.lo localename.lo math_stubs_float.lo \
@@ -362,7 +362,6 @@
 	codecvt.cc \
 	complex_io.cc \
 	ctype.cc \
-	globals_io.cc \
 	hash_tr1.cc \
 	hashtable_tr1.cc \
 	ios.cc \
