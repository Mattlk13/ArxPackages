#!/bin/bash

cmake_platform='Windows'
case_insensitive_fs=1
convert_man_to_text=1
allow_symlinks=0
library_pattern='*.dll'
objdump_lib_pattern='DLL Name: '
exe_suffix='.exe'
text_suffix='.txt'

create_wrapper() {
	local wrapper="$1"
	local use_path="$2"
	local cmd_dash="$3"
	local prefixes=( "${@:4}" )
	
	local target="${targets[windows-i686]}"
	
	local command="${wrapper##*/}"
	local scommand="$(printf '%s' "${command%.*}" | tr - _)"
	
	[ $wrapper_use_path = 1 ] || use_path=0
	
	local wrapper_options=(
		-static-libgcc
		-s
		-Os
		-DUNICODE
		-D_UNICODE
		-DLAUNCHER_USE_PATH="$use_path"
		-DLAUNCHER_USE_CMD_PATH=$wrapper_use_cmd_path
		-DLAUNCHER_COMMAND="$command"
		-DLAUNCHER_SCOMMAND="$scommand"
	)
	
	local binary="${bindir}/${architectures[0]}/${command}"
	[ -f "$binary" ] || die "missing $binary"
	local builddir="${buildroot}/build-wrapper-${command}"
	mkdir -p "$builddir"
	
	# Select between GUI and console subsystems
	case "$(file "$binary")" in
		*' executable (GUI)'*) wrapper_options+=( -mwindows -DLAUNCHER_ATTACH_CONSOLE=1 ) ;;
		*' executable (console)'*) wrapper_options+=( -DLAUNCHER_WAIT=1 ) ;;
		*) die "Unknown binary type: $binary: $(file "$binary")"
	esac
	
	# Copy resources (icons) to the wrapper
	local resources="$builddir/resources.obj"
	"$target-windres" "$binary" -O coff -o "$resources" 2>&1
	[ -f "$resources" ] && wrapper_options+=( "$resources" )
	
	"$target-gcc" "$scriptdir/launcher.c" -o "$wrapper" "${wrapper_options[@]}"
}

. "${BASH_SOURCE[0]%/*}/../build"
