#!/bin/bash

. "${BASH_SOURCE[0]%/*}/common"
. "${scriptdir}/changelog"
. "${scriptdir}/demarkdown"

if [ ! $flat_files_tree = 0 ] ; then
	_outdir="$outdir"
else
	_outdir="${outdir}/${project}-${version}"
fi

mkdir -p "$_outdir"
pushd "$_outdir"

_files=( )

for f in "${project}"-* ; do
	
	# Ignore directories
	[ ! -f "$f" ] && continue
	
	# Ignore existing signatures
	[[ "$f" == *.sig ]] && continue
	
	# Ignore debug symbols
	[[ "$f" == *-debug.* ]] && continue
	
	if [ ! -z "${sign_key-}" ] && [ "$f" -nt "${f}.sig" ] ; then
		# Sign the created archive
		e gpg --local-user "0x$sign_key" --detach-sign --no-tty "$f"
	fi
	
	_files+=( "${f##*/}" )
	
done

readarray -t _sfiles < <(for f in "${_files[@]:+${_files[@]}}"; do echo "$f"; done | sort -V)

update_checksums() {
	local prefix="$1"
	local command="$2"
	local file="$3"
	old="$(cat "$file" 2> /dev/null || true)"
	if [ ${#_sfiles[@]} = 0 ]
		then new='' ; echo > "$file"
		else new="$("$command" -b "${_sfiles[@]}")"
	fi
	if [ "$new" = "$old" ] ; then
		changed=0
	else
		echo "$new" > "$file"
		changed=1
	fi
	eval "${prefix}_file=\"\$file\""
	eval "${prefix}_changed=\"\$changed\""
}

update_checksums _md5sums md5sum 'MD5SUMS'
update_checksums _sha256sums sha256sum 'SHA256SUMS'
update_checksums _sha512sums sha512sum 'SHA512SUMS'

_readme_file="README"
_md_file="${_readme_file}.md"
if [ ! -f "${_md_file}" ] || [ $_md5sums_changed = 1 ] ; then
	
	# Title
	echo > "$_md_file"
	get_codename _codename
	[ -z "$_codename" ] || _codename=" \"$_codename\""
	if [ ! $flat_files_tree = 0 ] ; then
		echo "# ${project_name}" >> "$_md_file"
	else
		echo "# ${project_name} ${version}${_codename}" >> "$_md_file"
	fi
	
	# Introduction
	echo >> "$_md_file"
	if [ ! $flat_files_tree = 0 ] ; then
		echo "This directory contains files for [${project_name}](${project_url})." >> "$_md_file"
	else
		if [ "${#_files[@]}" = 1 ] ; then _and_binaries='' ; else _and_binaries=' and binaries' ; fi
		echo -n "This directory contains source code${_and_binaries} for version ${version} of [${project_name}](${project_url})" >> "$_md_file"
		if [ ! -z "${project_tagline-}" ] ; then
		echo -n ", ${project_tagline}" >> "$_md_file"
		fi
		echo "." >> "$_md_file"
	fi
	
	# Alternate download locations
	if [ ! -z "${project_downloads_url-}" ] ; then 
		echo                                   >> "$_md_file"
		echo "See the main [downloads page](${project_downloads_url}) for ${project_downloads_url_desc}." >> "$_md_file"
	fi
	
	# Checksums
	echo >> "$_md_file"
	echo '## MD5 Checksums' >> "$_md_file"
	echo >> "$_md_file"
	while IFS= read -r line ; do
		_checksum="${line%% *}"
		_file="${line#* }"
		_file="${line#*\*}"
		echo "* \`${_checksum}\`  ${_file}" >> "$_md_file"
	done < "$_md5sums_file"
	
	# Changelog
	if [ $flat_files_tree = 0 ] ; then
		echo >> "$_md_file"
		echo '## Changelog' >> "$_md_file"
		if [ $is_test_version = 0 ] ; then
			get_changelog _changelog
			echo >> "$_md_file"
			echo "$_changelog" >> "$_md_file"
		else
			echo >> "$_md_file"
			_commit_file='COMMIT'
			echo -n "This release is a development snapshot" >> "$_md_file"
			if [ -f "$_commit_file" ] ; then
				_commit="$(cat "$_commit_file")"
				_commit="${_commit:0:$commit_prefix_length}"
				echo -n " of " >> "$_md_file"
				if [ ! -z "${project_commits_url:-}" ] ; then
					echo -n "[" >> "$_md_file"
				fi
				echo -n "commit ${_commit}" >> "$_md_file"
				if [ ! -z "${project_commits_url:-}" ] ; then
					echo -n "](${project_commits_url}${_commit})" >> "$_md_file"
				fi
			fi
			echo "!" >> "$_md_file"
		fi
		if [ ! -z "${project_changelog_url-}" ] ; then
			echo >> "$_md_file"
			echo "See the full [changelog](${project_changelog_url}) for changes in other versions." >> "$_md_file"
		fi
	fi
	
	demarkdown --subsection --subsection < "$_md_file" > "$_readme_file"
	
fi

_rsspart_file="feed.rsspart"
if [ $flat_files_tree = 0 ] && [ $is_snapshot = 1 ] && [ ! -z "${project_files_url:-}" ] \
   && [ ! -f "$_rsspart_file" ] ; then
	
	get_changelog _changelog
	_changelog="$(echo "$_changelog" | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g; s/"/\&quot;/g; s/'"'"'/\&#39;/g')"
	_changelog="<h2>Changes:</h2>
<ul>
$(echo "$_changelog" | sed 's/^\*/<li>/')
</ul>"
	_changelog="$(echo "$_changelog" | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g; s/"/\&quot;/g; s/'"'"'/\&#39;/g')"
	_time="$(stat -c "%Y" "${project}-${version}${archives[source-build]}")"
	_snapshots_url="${project_files_url}snapshots/${project}-${version}/"
		echo "<item>
<title>${project_name} ${version} development snapshot</title>
<link>${_snapshots_url}</link>
<pubDate>$(date --rfc-2822 --utc --date="@${_time}")</pubDate>
<guid isPermaLink=\"true\">${_snapshots_url}</guid>
<description>
${_changelog}
</description>
</item>" > "$_rsspart_file"
	
fi

popd

if [ $flat_files_tree = 0 ] ; then
	for _outdir in "$outdir" ; do
		[ -d "$_outdir" ] || continue
		pushd "$_outdir"
		for dir in "$project"-* ; do
			[ -d "$dir" ] || continue
			e touch "$dir" --reference="$dir/$dir${archives[source-build]}"
		done
		popd
	done
fi

if [ $flat_files_tree = 0 ] && [ $is_snapshot = 1 ] && [ -d "$outdir" ] \
   && [ ! -z "${project_files_url:-}" ] ; then
	pushd "$outdir"
	_snapshots_url="${project_files_url}snapshots/"
	_snapshot_time=0
	echo "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<rss version=\"2.0\" xmlns:atom=\"http://www.w3.org/2005/Atom\">
<channel>
<title>${project_name} Development Snapshots</title>
<link>${_snapshots_url}</link>
<description>Untested in-developments builds of ${project_name}</description>
<language>en-us</language>
<atom:link href=\"${_snapshots_url}feed.rss\" rel=\"self\" type=\"application/rss+xml\" />" \
		 > feed.rss
	_i=0
	for dir in $(ls -d -- "$project"-* | sort --version-sort --reverse) ; do
		_rsspart_file="${dir}/feed.rsspart"
		[ -f "$_rsspart_file" ] || continue
		_time="$(stat -c "%Y" "$dir")"
		[ "$_time" -gt "$_snapshot_time" ] && _snapshot_time="$_time"
		cat "$_rsspart_file" >> feed.rss
		((_i++)) || true
		[ $_i -lt 5 ] || break
	done
	echo '</channel>
</rss>' >> feed.rss
	e touch -d "@${_snapshot_time}" feed.rss
	popd
fi
