#!/bin/bash

. "${BASH_SOURCE[0]%/*}/../common"
. "${BASH_SOURCE[0]%/*}/common"

get_output _source _sourcedir "$version" 'source'



_gpg_command="${PWD}/gpg-wrapper"
echo "#!/bin/bash
gpg --local-user 0x${launchpad_key} --no-tty \"\$@\"" \
	> "$_gpg_command"
chmod +x "$_gpg_command"

get_output _output

for series in source binary "${ubuntu_versions[@]}" ; do
	
	ubuntu_ver=''
	case "$series" in
		source)
			archive='source'
		;;
		binary)
			[ $obs_bin_deb = 0 ] && continue
			archive='linux'
		;;
		*)
			ubuntu_ver="$series"
			case "${launchpad_builds["$ubuntu_ver"]:-source}" in
				disabled) continue ;;
				source) archive='source' ;;
				binary) archive='linux' ;;
				*) die "Unknown build type for $ubuntu_ver: '${launchpad_builds["$ubuntu_ver"]:-source}'"
			esac
		;;
	esac
	[ -z "$ubuntu_ver" ] && series='stable'
	
	_config="${PWD}/config.php"
	case "$archive" in
		source)
			echo "<? \$bin = false;" > "$_config"
			_deb_ver="$_deb_version"
			_deb_rel="$_deb_release"
			_suffix=''
		;;
		*)
			echo "<? \$bin = true;" > "$_config"
			_deb_ver="$_deb_bin_version"
			_deb_rel="$_deb_bin_release"
			_suffix=' (prebuilt binaries)'
	esac
	echo "\$series = '$series';" >> "$_config"
	
	if [ ! -z "$ubuntu_ver" ] ; then
		_build=1
		_deb_rel="${_deb_ver}-0ppa${_build}~${ubuntu_ver}"
		while [ "$ubuntu_ver" = "$rebuild" ] && [ -f "${_output}/${project}_${_deb_rel}.dsc" ] ; do
			((++_build))
			_deb_rel="${_deb_ver}-0ppa${_build}~${ubuntu_ver}"
		done
	fi
	
	[ -f "${_output}/${project}_${_deb_rel}.dsc" ] && continue
	
	get_output _source _sourcedir "$version" "$archive"
	e cp "$_source" "${project}_${_deb_ver}.orig.tar.${_source##*.}"
	
	[ -e "$_sourcedir" ] && e rm -rf "$_sourcedir"
	e extract "$_source"
	
	if [ -z "$ubuntu_ver" ] ; then
		echo "  ${white}:: building source package for debian${_suffix}${reset}" >&2
	else
		echo "  ${white}:: building source package for ubuntu ${ubuntu_ver}${_suffix}${reset}" >&2
	fi
	
	pushd "$_sourcedir"
		
		e preprocess_all "$_config" "${pkgsrcdir}" "debian"
		
		if [ ! $is_snapshot = 0 ] ; then
			_tmpfile="${PWD}/changelog.temp"
			get_shortlog _changelog
			_changelog="$(echo "$_changelog" | sed 's/^-/*/;s/^/  /')"
			echo "${project} (${_deb_release}) stable; urgency=low

${_changelog:?bad changelog}

 -- ${packager}  $(date --rfc-2822 --reference="$_source")
" > "$_tmpfile"
		cat "debian/changelog" >> "$_tmpfile"
			e mv "$_tmpfile" "debian/changelog"
		fi
		
		if [ ! -z "$ubuntu_ver" ] && [ $_build -gt 1 ] ; then
			_tmpfile="${PWD}/changelog.temp"
			echo "${project} (${_deb_rel}) ${ubuntu_ver}; urgency=low

  * Rebuild only

 -- ${packager}  $(date --rfc-2822)
" > "$_tmpfile"
			cat "debian/changelog" >> "$_tmpfile"
			e mv "$_tmpfile" "debian/changelog"
		elif [ ! "$_deb_rel" = "$_deb_release" ] ; then
			e sed -i "s/^\\([^ ]*\\) ($(escape_sed "$_deb_release")) \\([^;]*\\);/\\1 ($(escape_sed "$_deb_rel")) ${series};/" 'debian/changelog'
		fi
		
		if [ -z "$ubuntu_ver" ] ; then
			# Build unsigned .dsc file for OBS
			e dpkg-buildpackage -S -us -uc -d -p"$_gpg_command" 2>&1
		else
			# Build signed .dsc file for Launchpad
			e dpkg-buildpackage -S -d -p"$_gpg_command" 2>&1
		fi
		
		e require_file "${_output}/${project}_${_deb_rel}.dsc"
		e require_file "${_output}/${project}_${_deb_rel}_source.changes"
		e require_file "${_output}/${project}_${_deb_rel}.debian.tar".*
		
	popd
	
done

# Preserve the output files
[ -d "$_output" ] || e mkdir "$_output"
e find -mindepth 1 -maxdepth 1 -type f -name "${project}*" -exec mv -n {} "$_output/" \;
