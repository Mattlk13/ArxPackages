#!/bin/bash

. "${BASH_SOURCE[0]%/*}/../common"

_deb_version="$(head -1 "${pkgsrcdir}/changelog" | sed 's/^.*(\([^\-]*\)-.*$/\1/')"
echo "debian version is ${_deb_version}"
_deb_release="$(head -1 "${pkgsrcdir}/changelog" | sed 's/^.*(\([^)]*\)).*$/\1/')"
echo "debian release is ${_deb_release}"

[ "$_deb_version" = "$version" ] || die "DEB version is ${_deb_version}, expected ${version}"

get_output _source _sourcedir "$_deb_version" 'source'

e cp "$_source" "${project}_${_deb_version}.orig.tar.${_source##*.}"

e extract "$_source"

_gpg_command="${PWD}/gpg-wrapper"
echo "#!/bin/bash
gpg --local-user 0x${launchpad_key} --no-tty \"\$@\"" \
	> "$_gpg_command"
chmod +x "$_gpg_command"

get_output _output

pushd "$_sourcedir"
	
	e rsync -a "${pkgsrcdir}/" 'debian'
	
	if [ ! -f "${_output}/${project}.dsc" ] ; then
		
		echo "  ${white}:: building source package for debian${reset}" >&2
		
		e dpkg-buildpackage -S -us -uc -d -p"$_gpg_command" 2>&1
		e require_file *.dsc
		e require_file *_source.changes
		e require_file *.debian.tar.*
		
	fi
	
	for ubuntu_ver in "${ubuntu_versions[@]}" ; do
		
		if [ ! -f "${_output}/"*~${ubuntu_ver}*.dsc ] ; then
			
			echo "  ${white}:: building source package for ubuntu ${ubuntu_ver}${reset}" >&2
			
			# Change the Debian version to an Ubuntu ppa version
			e cp "$pkgsrcdir/changelog" 'debian/changelog'
			e sed -i "s/^\\([^ ]*\\) (\\([^\\-]*\\)-\\([0-9]*\\)\\.\\([0-9]*\\)) \\([^;]*\\);/\\1 (\\2-\\3ppa\\4~${ubuntu_ver}) ${ubuntu_ver};/" 'debian/changelog'
			
			e dpkg-buildpackage -S -d -p"$_gpg_command" 2>&1
			e require_file *~${ubuntu_ver}*.dsc
			e require_file *~${ubuntu_ver}_source.changes
			e require_file *~${ubuntu_ver}.debian.tar.*
			
		fi
		
	done
	
popd

if [ ! -f "${_output}/${project}.dsc" ] ; then
	e cp "${project}_${_deb_release}.dsc" "${project}.dsc"
fi

# Preserve the output files
[ -d "$_output" ] || e mkdir "$_output"
e find -mindepth 1 -maxdepth 1 -type f ! -name gpg-wrapper -exec mv -n {} "$_output/" \;
